---
# SPDX-FileCopyrightText: (C) 2025 Intel Corporation
# SPDX-License-Identifier: Apache-2.0

name: Pre-Merge CI Pipeline

on:
  pull_request:
    branches:
      - main
      - release-*
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  pre-checks:
    runs-on: ubuntu-latest
    outputs:
      filtered_projects: ${{ steps.filter-changes.outputs.filtered_projects }}
    steps:
      - uses: actions/checkout@v4
      - name: "Verify Branch Name"
        uses: open-edge-platform/orch-ci/verify-branch-name@main
      - name: "Discover Changed Subfolders"
        id: discover-changes
        uses: open-edge-platform/orch-ci/discover-changed-subfolders@main
      - name: "Filter Out Unwanted Changed Subfolders"
        id: filter-changes
        run: |
          folders_to_remove='[".github",".reuse","LICENSES",".git","tools"]'
          
          changed_projects='${{ steps.discover-changes.outputs.changed_projects }}'
          filtered_projects=$(echo "$changed_projects" | jq -cr --argjson folders_to_remove "$folders_to_remove" 'map(select(. as $item | $folders_to_remove | index($item) | not))')
          echo "filtered_projects=$filtered_projects" >> $GITHUB_OUTPUT
  pre-merge-pipeline:
    needs: pre-checks
    if: ${{ needs.pre-checks.outputs.filtered_projects != '[]' }}
    strategy:
      fail-fast: false
      matrix:
        project_folder: ${{ fromJson(needs.pre-checks.outputs.filtered_projects) }}
    uses: open-edge-platform/orch-ci/.github/workflows/pre-merge.yml@main
    with:
      run_security_scans: true
      run_version_check: true
      run_dep_version_check: true
      run_build: true
      run_lint: true
      run_test: false #only for testing 
      run_validate_clean_folder: true
      run_docker_build: true
      run_scan_containers: true
      run_artifact: false
      prefix_tag_separator: "/"
      project_folder: ${{ matrix.project_folder }}
      # temporarily use the main branch as the reference branch
      # to use the latest golangci-lint version
      orch_ci_repo_ref: "main"
    secrets: inherit
  final-check:
    runs-on: ubuntu-latest
    if: ${{ always() }}
    needs: [pre-merge-pipeline]
    steps:
      - name: Upload Lint Report
        uses: actions/upload-artifact@v4
        with:
          name: out/yaml-syntax-report
          path: /home/runner/work/virtual-edge-node/virtual-edge-node/vm-provisioning/out/yaml-syntax-report.log
          
      - name: Final Status Check
        run: |
          pre_merge_pipeline_result="${{ needs.pre-merge-pipeline.result }}"
          
          echo "Pre-merge pipeline result: $pre_merge_pipeline_result"

          if [ "$pre_merge_pipeline_result" == "success" ] || [ "$pre_merge_pipeline_result" == "skipped" ]; then
            echo "Pre-merge check passed successfully."
          else
            echo "Pre-merge checks failed. PR can't get merged"
            exit 1
          fi
