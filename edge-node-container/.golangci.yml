---
# SPDX-FileCopyrightText: (C) 2025 Intel Corporation
# SPDX-License-Identifier: Apache-2.0

linters:
  enable:
    - asasalint
    - asciicheck
    - bidichk
    - bodyclose
    - copyloopvar
    - cyclop
    - depguard
    - dogsled
    - durationcheck
    - errcheck
    - errname
    - errorlint
    - exhaustive
    - funlen
    - gci
    - gochecknoinits
    - goconst
    - gocritic
    - gocyclo
    - godot
    - gofmt
    - gofumpt
    - goheader
    - goimports
    - gomoddirectives
    - goprintffuncname
    - gosec
    - gosimple
    - govet
    - ineffassign
    - lll
    - misspell
    - mnd
    - nakedret
    - nilerr
    - nilnil
    - noctx
    - nolintlint
    - prealloc
    - predeclared
    - revive
    - staticcheck
    - stylecheck
    - tagliatelle
    - testpackage
    - tenv
    - testableexamples
    - thelper
    - tparallel
    - typecheck
    - unconvert
    - unparam
    - unused
    - usestdlibvars
    - whitespace

run:
  timeout: 10m

  issues-exit-code: 1

  tests: true

  # With the read-only mode linter will fail if go.mod file is outdated.
  modules-download-mode: readonly

  # Keep this empty to use the Go version from the go.mod file.
  go: ""

linters-settings:
  cyclop:
    # SDL requirements dictate a maximum cyclomatic complexity of 10
    max-complexity: 10
  govet:
    enable:
      - shadow
  misspell:
    locale: US
  lll:
    line-length: 130
    tab-width: 4
  funlen:
    lines: 100
    statements: 50
  exhaustive:
    default-signifies-exhaustive: true
  gci:
    sections:
      # Standard section: captures all standard packages.
      - standard
      # Default section: contains all imports that could not be matched to another section type.
      - default
      # Custom section: groups all imports with the specified Prefix.
      - prefix(github.com/open-edge-platform)
  gocritic:
    enabled-tags:
      - diagnostic
      - experimental
      - opinionated
      - performance
      - style
    disabled-checks:
      # These 3 will detect many cases, but they do sense
      # if it's performance oriented code
      - hugeParam
      - rangeExprCopy
      - rangeValCopy
      - unnamedResult
  errcheck:
    # Report `a := b.(MyStruct)` when `a, ok := ...` should be.
    check-type-assertions: true   # Default: false
    # Report skipped checks:`num, _ := strconv.Atoi(numStr)`.
    check-blank: true   # Default: false
    # Function to skip.
    exclude-functions:
      - io/ioutil.ReadFile
      - io.Copy(*bytes.Buffer)
      - io.Copy(os.Stdout)
  nakedret:
    # No naked returns, ever.
    max-func-lines: 1   # Default: 30
  tagliatelle:
    case:
      rules:
        json: snake
        yaml: snake
        xml: camel
        bson: camel
        avro: snake
        mapstructure: kebab
  depguard:
    rules:
      Main:
        files:
          - $all
          - "!$test"
        allow:
          - $gostd
          - github.com/open-edge-platform
          - github.com/magefile/mage/sh
          - github.com/goccy/go-json
          - github.com/google
          - github.com/mennanov/fmutils
          - github.com/golang-jwt/jwt/v5
          - github.com/onosproject
          - github.com/pkg/errors
          - github.com/rs/zerolog
          - github.com/cenkalti/backoff
          - github.com/stretchr/testify/require
          - github.com/Nerzal/gocloak/v13
          - github.com/stretchr/testify/assert
          - github.com/manifoldco/promptui
          - github.com/go-co-op/gocron
        deny: []
      Test:
        files:
          - $test
        allow:
          - $gostd
          - github.com/open-edge-platform
          - github.com/goccy/go-json
          - github.com/google
          - github.com/rs/zerolog
          - github.com/stretchr/testify/require
          - github.com/stretchr/testify/assert
          - github.com/stretchr/testify/mock
          - github.com/onsi/gomega
          - github.com/onsi/ginkgo/v2
        deny: []

issues:
  max-issues-per-linter: 0

  max-same-issues: 0

  # When set to `true` linter will analyze only new code which are
  # not committed or after some specific revision. This is a cool
  # feature when you're going to introduce linter into a big project.
  # But I prefer going gradually package by package.
  # So, it's set to `false` to scan all code.
  new: false

  fix: false

  exclude:
    - Error return value of `.*Close` is not checked
    - Error return value of `.*Flush` is not checked
    - Error return value of `.*Write` is not checked
    - Error return value of `.*Stop` is not checked

  exclude-rules:
    - path: test/*
      linters:
        # Exclude all linters for the test file.
        - cyclop
        - funlen
    - path: test/infra/*
      linters:
        # Exclude for dot imports of ginkgo and gomega.
        - revive
    - path: go.mod
      linters:
        # Exclude for go.mod file internal import.
        - gomoddirectives

  # Autogenerated files can be skipped (I'm looking at you gRPC/OpenAPI).
  exclude-dirs:
    - "pkg/api/"

  uniq-by-line: false

output:
  # Format:
  # colored-line-number|line-number|json|tab|checkstyle|code-climate|junit-xml|github-actions
  #
  # Multiple can be specified by separating them by comma, output can be provided
  # for each of them by separating format name and path by colon symbol.
  # Output path can be either `stdout`, `stderr` or path to the file to write to.
  # Example: "checkstyle:report.json,colored-line-number"
  #
  # Default: colored-line-number
  formats: colored-line-number:stdout,html:out/golangci-lint.html,junit-xml:out/golangci-lint.xml

  print-linter-name: true

  sort-results: true
