// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: ensim/v1/ensim.proto

package ensimv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on NodeStatus with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NodeStatus) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NodeStatus with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NodeStatusMultiError, or
// nil if none found.
func (m *NodeStatus) ValidateAll() error {
	return m.validate(true)
}

func (m *NodeStatus) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Source

	// no validation rules for Mode

	// no validation rules for Details

	if len(errors) > 0 {
		return NodeStatusMultiError(errors)
	}

	return nil
}

// NodeStatusMultiError is an error wrapping multiple validation errors
// returned by NodeStatus.ValidateAll() if the designated constraints aren't met.
type NodeStatusMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NodeStatusMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NodeStatusMultiError) AllErrors() []error { return m }

// NodeStatusValidationError is the validation error returned by
// NodeStatus.Validate if the designated constraints aren't met.
type NodeStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NodeStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NodeStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NodeStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NodeStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NodeStatusValidationError) ErrorName() string { return "NodeStatusValidationError" }

// Error satisfies the builtin error interface
func (e NodeStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNodeStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NodeStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NodeStatusValidationError{}

// Validate checks the field values on AgentsStates with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AgentsStates) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AgentsStates with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AgentsStatesMultiError, or
// nil if none found.
func (m *AgentsStates) ValidateAll() error {
	return m.validate(true)
}

func (m *AgentsStates) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DesiredState

	// no validation rules for CurrentState

	// no validation rules for AgentType

	if len(errors) > 0 {
		return AgentsStatesMultiError(errors)
	}

	return nil
}

// AgentsStatesMultiError is an error wrapping multiple validation errors
// returned by AgentsStates.ValidateAll() if the designated constraints aren't met.
type AgentsStatesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AgentsStatesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AgentsStatesMultiError) AllErrors() []error { return m }

// AgentsStatesValidationError is the validation error returned by
// AgentsStates.Validate if the designated constraints aren't met.
type AgentsStatesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AgentsStatesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AgentsStatesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AgentsStatesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AgentsStatesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AgentsStatesValidationError) ErrorName() string { return "AgentsStatesValidationError" }

// Error satisfies the builtin error interface
func (e AgentsStatesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAgentsStates.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AgentsStatesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AgentsStatesValidationError{}

// Validate checks the field values on NodeCredentials with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *NodeCredentials) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NodeCredentials with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// NodeCredentialsMultiError, or nil if none found.
func (m *NodeCredentials) ValidateAll() error {
	return m.validate(true)
}

func (m *NodeCredentials) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Project

	// no validation rules for OnboardUsername

	// no validation rules for OnboardPassword

	// no validation rules for ApiUsername

	// no validation rules for ApiPassword

	if len(errors) > 0 {
		return NodeCredentialsMultiError(errors)
	}

	return nil
}

// NodeCredentialsMultiError is an error wrapping multiple validation errors
// returned by NodeCredentials.ValidateAll() if the designated constraints
// aren't met.
type NodeCredentialsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NodeCredentialsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NodeCredentialsMultiError) AllErrors() []error { return m }

// NodeCredentialsValidationError is the validation error returned by
// NodeCredentials.Validate if the designated constraints aren't met.
type NodeCredentialsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NodeCredentialsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NodeCredentialsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NodeCredentialsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NodeCredentialsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NodeCredentialsValidationError) ErrorName() string { return "NodeCredentialsValidationError" }

// Error satisfies the builtin error interface
func (e NodeCredentialsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNodeCredentials.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NodeCredentialsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NodeCredentialsValidationError{}

// Validate checks the field values on Node with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Node) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Node with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in NodeMultiError, or nil if none found.
func (m *Node) ValidateAll() error {
	return m.validate(true)
}

func (m *Node) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uuid

	if all {
		switch v := interface{}(m.GetCredentials()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NodeValidationError{
					field:  "Credentials",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NodeValidationError{
					field:  "Credentials",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCredentials()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NodeValidationError{
				field:  "Credentials",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetStatus() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, NodeValidationError{
						field:  fmt.Sprintf("Status[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, NodeValidationError{
						field:  fmt.Sprintf("Status[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return NodeValidationError{
					field:  fmt.Sprintf("Status[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetAgentsStates() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, NodeValidationError{
						field:  fmt.Sprintf("AgentsStates[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, NodeValidationError{
						field:  fmt.Sprintf("AgentsStates[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return NodeValidationError{
					field:  fmt.Sprintf("AgentsStates[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for EnableTeardown

	if len(errors) > 0 {
		return NodeMultiError(errors)
	}

	return nil
}

// NodeMultiError is an error wrapping multiple validation errors returned by
// Node.ValidateAll() if the designated constraints aren't met.
type NodeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NodeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NodeMultiError) AllErrors() []error { return m }

// NodeValidationError is the validation error returned by Node.Validate if the
// designated constraints aren't met.
type NodeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NodeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NodeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NodeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NodeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NodeValidationError) ErrorName() string { return "NodeValidationError" }

// Error satisfies the builtin error interface
func (e NodeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNode.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NodeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NodeValidationError{}

// Validate checks the field values on CreateNodeRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateNodeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateNodeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateNodeRequestMultiError, or nil if none found.
func (m *CreateNodeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateNodeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uuid

	if all {
		switch v := interface{}(m.GetCredentials()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateNodeRequestValidationError{
					field:  "Credentials",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateNodeRequestValidationError{
					field:  "Credentials",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCredentials()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateNodeRequestValidationError{
				field:  "Credentials",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for EnableTeardown

	if len(errors) > 0 {
		return CreateNodeRequestMultiError(errors)
	}

	return nil
}

// CreateNodeRequestMultiError is an error wrapping multiple validation errors
// returned by CreateNodeRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateNodeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateNodeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateNodeRequestMultiError) AllErrors() []error { return m }

// CreateNodeRequestValidationError is the validation error returned by
// CreateNodeRequest.Validate if the designated constraints aren't met.
type CreateNodeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateNodeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateNodeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateNodeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateNodeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateNodeRequestValidationError) ErrorName() string {
	return "CreateNodeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateNodeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateNodeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateNodeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateNodeRequestValidationError{}

// Validate checks the field values on CreateNodeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateNodeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateNodeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateNodeResponseMultiError, or nil if none found.
func (m *CreateNodeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateNodeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateNodeResponseMultiError(errors)
	}

	return nil
}

// CreateNodeResponseMultiError is an error wrapping multiple validation errors
// returned by CreateNodeResponse.ValidateAll() if the designated constraints
// aren't met.
type CreateNodeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateNodeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateNodeResponseMultiError) AllErrors() []error { return m }

// CreateNodeResponseValidationError is the validation error returned by
// CreateNodeResponse.Validate if the designated constraints aren't met.
type CreateNodeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateNodeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateNodeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateNodeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateNodeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateNodeResponseValidationError) ErrorName() string {
	return "CreateNodeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateNodeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateNodeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateNodeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateNodeResponseValidationError{}

// Validate checks the field values on CreateNodesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateNodesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateNodesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateNodesRequestMultiError, or nil if none found.
func (m *CreateNodesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateNodesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Number

	// no validation rules for BatchSize

	if all {
		switch v := interface{}(m.GetCredentials()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateNodesRequestValidationError{
					field:  "Credentials",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateNodesRequestValidationError{
					field:  "Credentials",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCredentials()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateNodesRequestValidationError{
				field:  "Credentials",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for EnableTeardown

	if len(errors) > 0 {
		return CreateNodesRequestMultiError(errors)
	}

	return nil
}

// CreateNodesRequestMultiError is an error wrapping multiple validation errors
// returned by CreateNodesRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateNodesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateNodesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateNodesRequestMultiError) AllErrors() []error { return m }

// CreateNodesRequestValidationError is the validation error returned by
// CreateNodesRequest.Validate if the designated constraints aren't met.
type CreateNodesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateNodesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateNodesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateNodesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateNodesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateNodesRequestValidationError) ErrorName() string {
	return "CreateNodesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateNodesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateNodesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateNodesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateNodesRequestValidationError{}

// Validate checks the field values on CreateNodesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateNodesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateNodesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateNodesResponseMultiError, or nil if none found.
func (m *CreateNodesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateNodesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetNodes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateNodesResponseValidationError{
						field:  fmt.Sprintf("Nodes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateNodesResponseValidationError{
						field:  fmt.Sprintf("Nodes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateNodesResponseValidationError{
					field:  fmt.Sprintf("Nodes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateNodesResponseMultiError(errors)
	}

	return nil
}

// CreateNodesResponseMultiError is an error wrapping multiple validation
// errors returned by CreateNodesResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateNodesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateNodesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateNodesResponseMultiError) AllErrors() []error { return m }

// CreateNodesResponseValidationError is the validation error returned by
// CreateNodesResponse.Validate if the designated constraints aren't met.
type CreateNodesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateNodesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateNodesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateNodesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateNodesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateNodesResponseValidationError) ErrorName() string {
	return "CreateNodesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateNodesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateNodesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateNodesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateNodesResponseValidationError{}

// Validate checks the field values on GetNodeRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetNodeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNodeRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetNodeRequestMultiError,
// or nil if none found.
func (m *GetNodeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNodeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uuid

	if len(errors) > 0 {
		return GetNodeRequestMultiError(errors)
	}

	return nil
}

// GetNodeRequestMultiError is an error wrapping multiple validation errors
// returned by GetNodeRequest.ValidateAll() if the designated constraints
// aren't met.
type GetNodeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNodeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNodeRequestMultiError) AllErrors() []error { return m }

// GetNodeRequestValidationError is the validation error returned by
// GetNodeRequest.Validate if the designated constraints aren't met.
type GetNodeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNodeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNodeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNodeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNodeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNodeRequestValidationError) ErrorName() string { return "GetNodeRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetNodeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNodeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNodeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNodeRequestValidationError{}

// Validate checks the field values on GetNodeResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetNodeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNodeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetNodeResponseMultiError, or nil if none found.
func (m *GetNodeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNodeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetNode()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetNodeResponseValidationError{
					field:  "Node",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetNodeResponseValidationError{
					field:  "Node",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNode()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetNodeResponseValidationError{
				field:  "Node",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetNodeResponseMultiError(errors)
	}

	return nil
}

// GetNodeResponseMultiError is an error wrapping multiple validation errors
// returned by GetNodeResponse.ValidateAll() if the designated constraints
// aren't met.
type GetNodeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNodeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNodeResponseMultiError) AllErrors() []error { return m }

// GetNodeResponseValidationError is the validation error returned by
// GetNodeResponse.Validate if the designated constraints aren't met.
type GetNodeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNodeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNodeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNodeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNodeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNodeResponseValidationError) ErrorName() string { return "GetNodeResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetNodeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNodeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNodeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNodeResponseValidationError{}

// Validate checks the field values on UpdateNodeRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateNodeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateNodeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateNodeRequestMultiError, or nil if none found.
func (m *UpdateNodeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateNodeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetNode()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateNodeRequestValidationError{
					field:  "Node",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateNodeRequestValidationError{
					field:  "Node",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNode()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateNodeRequestValidationError{
				field:  "Node",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateNodeRequestMultiError(errors)
	}

	return nil
}

// UpdateNodeRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateNodeRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateNodeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateNodeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateNodeRequestMultiError) AllErrors() []error { return m }

// UpdateNodeRequestValidationError is the validation error returned by
// UpdateNodeRequest.Validate if the designated constraints aren't met.
type UpdateNodeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateNodeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateNodeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateNodeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateNodeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateNodeRequestValidationError) ErrorName() string {
	return "UpdateNodeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateNodeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateNodeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateNodeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateNodeRequestValidationError{}

// Validate checks the field values on UpdateNodeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateNodeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateNodeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateNodeResponseMultiError, or nil if none found.
func (m *UpdateNodeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateNodeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateNodeResponseMultiError(errors)
	}

	return nil
}

// UpdateNodeResponseMultiError is an error wrapping multiple validation errors
// returned by UpdateNodeResponse.ValidateAll() if the designated constraints
// aren't met.
type UpdateNodeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateNodeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateNodeResponseMultiError) AllErrors() []error { return m }

// UpdateNodeResponseValidationError is the validation error returned by
// UpdateNodeResponse.Validate if the designated constraints aren't met.
type UpdateNodeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateNodeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateNodeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateNodeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateNodeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateNodeResponseValidationError) ErrorName() string {
	return "UpdateNodeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateNodeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateNodeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateNodeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateNodeResponseValidationError{}

// Validate checks the field values on DeleteNodeRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteNodeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteNodeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteNodeRequestMultiError, or nil if none found.
func (m *DeleteNodeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteNodeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uuid

	if len(errors) > 0 {
		return DeleteNodeRequestMultiError(errors)
	}

	return nil
}

// DeleteNodeRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteNodeRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteNodeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteNodeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteNodeRequestMultiError) AllErrors() []error { return m }

// DeleteNodeRequestValidationError is the validation error returned by
// DeleteNodeRequest.Validate if the designated constraints aren't met.
type DeleteNodeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteNodeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteNodeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteNodeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteNodeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteNodeRequestValidationError) ErrorName() string {
	return "DeleteNodeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteNodeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteNodeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteNodeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteNodeRequestValidationError{}

// Validate checks the field values on DeleteNodeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteNodeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteNodeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteNodeResponseMultiError, or nil if none found.
func (m *DeleteNodeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteNodeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteNodeResponseMultiError(errors)
	}

	return nil
}

// DeleteNodeResponseMultiError is an error wrapping multiple validation errors
// returned by DeleteNodeResponse.ValidateAll() if the designated constraints
// aren't met.
type DeleteNodeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteNodeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteNodeResponseMultiError) AllErrors() []error { return m }

// DeleteNodeResponseValidationError is the validation error returned by
// DeleteNodeResponse.Validate if the designated constraints aren't met.
type DeleteNodeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteNodeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteNodeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteNodeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteNodeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteNodeResponseValidationError) ErrorName() string {
	return "DeleteNodeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteNodeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteNodeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteNodeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteNodeResponseValidationError{}

// Validate checks the field values on DeleteNodesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteNodesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteNodesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteNodesRequestMultiError, or nil if none found.
func (m *DeleteNodesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteNodesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Number

	if len(errors) > 0 {
		return DeleteNodesRequestMultiError(errors)
	}

	return nil
}

// DeleteNodesRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteNodesRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteNodesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteNodesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteNodesRequestMultiError) AllErrors() []error { return m }

// DeleteNodesRequestValidationError is the validation error returned by
// DeleteNodesRequest.Validate if the designated constraints aren't met.
type DeleteNodesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteNodesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteNodesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteNodesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteNodesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteNodesRequestValidationError) ErrorName() string {
	return "DeleteNodesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteNodesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteNodesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteNodesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteNodesRequestValidationError{}

// Validate checks the field values on DeleteNodesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteNodesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteNodesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteNodesResponseMultiError, or nil if none found.
func (m *DeleteNodesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteNodesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteNodesResponseMultiError(errors)
	}

	return nil
}

// DeleteNodesResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteNodesResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteNodesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteNodesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteNodesResponseMultiError) AllErrors() []error { return m }

// DeleteNodesResponseValidationError is the validation error returned by
// DeleteNodesResponse.Validate if the designated constraints aren't met.
type DeleteNodesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteNodesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteNodesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteNodesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteNodesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteNodesResponseValidationError) ErrorName() string {
	return "DeleteNodesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteNodesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteNodesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteNodesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteNodesResponseValidationError{}

// Validate checks the field values on ListNodesRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListNodesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListNodesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListNodesRequestMultiError, or nil if none found.
func (m *ListNodesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListNodesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListNodesRequestMultiError(errors)
	}

	return nil
}

// ListNodesRequestMultiError is an error wrapping multiple validation errors
// returned by ListNodesRequest.ValidateAll() if the designated constraints
// aren't met.
type ListNodesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListNodesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListNodesRequestMultiError) AllErrors() []error { return m }

// ListNodesRequestValidationError is the validation error returned by
// ListNodesRequest.Validate if the designated constraints aren't met.
type ListNodesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListNodesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListNodesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListNodesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListNodesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListNodesRequestValidationError) ErrorName() string { return "ListNodesRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListNodesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListNodesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListNodesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListNodesRequestValidationError{}

// Validate checks the field values on ListNodesResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListNodesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListNodesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListNodesResponseMultiError, or nil if none found.
func (m *ListNodesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListNodesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetNode()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListNodesResponseValidationError{
					field:  "Node",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListNodesResponseValidationError{
					field:  "Node",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNode()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListNodesResponseValidationError{
				field:  "Node",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListNodesResponseMultiError(errors)
	}

	return nil
}

// ListNodesResponseMultiError is an error wrapping multiple validation errors
// returned by ListNodesResponse.ValidateAll() if the designated constraints
// aren't met.
type ListNodesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListNodesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListNodesResponseMultiError) AllErrors() []error { return m }

// ListNodesResponseValidationError is the validation error returned by
// ListNodesResponse.Validate if the designated constraints aren't met.
type ListNodesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListNodesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListNodesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListNodesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListNodesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListNodesResponseValidationError) ErrorName() string {
	return "ListNodesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListNodesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListNodesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListNodesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListNodesResponseValidationError{}

// Validate checks the field values on WatchNodesRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *WatchNodesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WatchNodesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WatchNodesRequestMultiError, or nil if none found.
func (m *WatchNodesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *WatchNodesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NoReplay

	// no validation rules for NoSubscribe

	if len(errors) > 0 {
		return WatchNodesRequestMultiError(errors)
	}

	return nil
}

// WatchNodesRequestMultiError is an error wrapping multiple validation errors
// returned by WatchNodesRequest.ValidateAll() if the designated constraints
// aren't met.
type WatchNodesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WatchNodesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WatchNodesRequestMultiError) AllErrors() []error { return m }

// WatchNodesRequestValidationError is the validation error returned by
// WatchNodesRequest.Validate if the designated constraints aren't met.
type WatchNodesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WatchNodesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WatchNodesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WatchNodesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WatchNodesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WatchNodesRequestValidationError) ErrorName() string {
	return "WatchNodesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e WatchNodesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWatchNodesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WatchNodesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WatchNodesRequestValidationError{}

// Validate checks the field values on WatchNodesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WatchNodesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WatchNodesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WatchNodesResponseMultiError, or nil if none found.
func (m *WatchNodesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *WatchNodesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetNode()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WatchNodesResponseValidationError{
					field:  "Node",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WatchNodesResponseValidationError{
					field:  "Node",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNode()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WatchNodesResponseValidationError{
				field:  "Node",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Type

	if len(errors) > 0 {
		return WatchNodesResponseMultiError(errors)
	}

	return nil
}

// WatchNodesResponseMultiError is an error wrapping multiple validation errors
// returned by WatchNodesResponse.ValidateAll() if the designated constraints
// aren't met.
type WatchNodesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WatchNodesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WatchNodesResponseMultiError) AllErrors() []error { return m }

// WatchNodesResponseValidationError is the validation error returned by
// WatchNodesResponse.Validate if the designated constraints aren't met.
type WatchNodesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WatchNodesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WatchNodesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WatchNodesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WatchNodesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WatchNodesResponseValidationError) ErrorName() string {
	return "WatchNodesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e WatchNodesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWatchNodesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WatchNodesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WatchNodesResponseValidationError{}
