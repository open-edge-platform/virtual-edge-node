// SPDX-FileCopyrightText: (C) 2025 Intel Corporation
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: ensim/v1/ensim.proto

package ensimv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	EdgeNodeModelService_CreateNodes_FullMethodName = "/ensim.v1.EdgeNodeModelService/CreateNodes"
	EdgeNodeModelService_CreateNode_FullMethodName  = "/ensim.v1.EdgeNodeModelService/CreateNode"
	EdgeNodeModelService_GetNode_FullMethodName     = "/ensim.v1.EdgeNodeModelService/GetNode"
	EdgeNodeModelService_UpdateNode_FullMethodName  = "/ensim.v1.EdgeNodeModelService/UpdateNode"
	EdgeNodeModelService_DeleteNode_FullMethodName  = "/ensim.v1.EdgeNodeModelService/DeleteNode"
	EdgeNodeModelService_WatchNodes_FullMethodName  = "/ensim.v1.EdgeNodeModelService/WatchNodes"
	EdgeNodeModelService_ListNodes_FullMethodName   = "/ensim.v1.EdgeNodeModelService/ListNodes"
	EdgeNodeModelService_DeleteNodes_FullMethodName = "/ensim.v1.EdgeNodeModelService/DeleteNodes"
)

// EdgeNodeModelServiceClient is the client API for EdgeNodeModelService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EdgeNodeModelServiceClient interface {
	// CreateNodes creates a number of nodes
	CreateNodes(ctx context.Context, in *CreateNodesRequest, opts ...grpc.CallOption) (*CreateNodesResponse, error)
	// CreateNode creates a single node
	CreateNode(ctx context.Context, in *CreateNodeRequest, opts ...grpc.CallOption) (*CreateNodeResponse, error)
	// GetNode retrieves a node by UUID
	GetNode(ctx context.Context, in *GetNodeRequest, opts ...grpc.CallOption) (*GetNodeResponse, error)
	// UpdateNode updates an existing node
	UpdateNode(ctx context.Context, in *UpdateNodeRequest, opts ...grpc.CallOption) (*UpdateNodeResponse, error)
	// DeleteNode deletes a node by UUID
	DeleteNode(ctx context.Context, in *DeleteNodeRequest, opts ...grpc.CallOption) (*DeleteNodeResponse, error)
	// WatchNodes streams node events
	WatchNodes(ctx context.Context, in *WatchNodesRequest, opts ...grpc.CallOption) (EdgeNodeModelService_WatchNodesClient, error)
	// ListNodes streams a list of nodes
	ListNodes(ctx context.Context, in *ListNodesRequest, opts ...grpc.CallOption) (EdgeNodeModelService_ListNodesClient, error)
	// DeleteNodes deletes multiple nodes
	DeleteNodes(ctx context.Context, in *DeleteNodesRequest, opts ...grpc.CallOption) (*DeleteNodesResponse, error)
}

type edgeNodeModelServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEdgeNodeModelServiceClient(cc grpc.ClientConnInterface) EdgeNodeModelServiceClient {
	return &edgeNodeModelServiceClient{cc}
}

func (c *edgeNodeModelServiceClient) CreateNodes(ctx context.Context, in *CreateNodesRequest, opts ...grpc.CallOption) (*CreateNodesResponse, error) {
	out := new(CreateNodesResponse)
	err := c.cc.Invoke(ctx, EdgeNodeModelService_CreateNodes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *edgeNodeModelServiceClient) CreateNode(ctx context.Context, in *CreateNodeRequest, opts ...grpc.CallOption) (*CreateNodeResponse, error) {
	out := new(CreateNodeResponse)
	err := c.cc.Invoke(ctx, EdgeNodeModelService_CreateNode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *edgeNodeModelServiceClient) GetNode(ctx context.Context, in *GetNodeRequest, opts ...grpc.CallOption) (*GetNodeResponse, error) {
	out := new(GetNodeResponse)
	err := c.cc.Invoke(ctx, EdgeNodeModelService_GetNode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *edgeNodeModelServiceClient) UpdateNode(ctx context.Context, in *UpdateNodeRequest, opts ...grpc.CallOption) (*UpdateNodeResponse, error) {
	out := new(UpdateNodeResponse)
	err := c.cc.Invoke(ctx, EdgeNodeModelService_UpdateNode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *edgeNodeModelServiceClient) DeleteNode(ctx context.Context, in *DeleteNodeRequest, opts ...grpc.CallOption) (*DeleteNodeResponse, error) {
	out := new(DeleteNodeResponse)
	err := c.cc.Invoke(ctx, EdgeNodeModelService_DeleteNode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *edgeNodeModelServiceClient) WatchNodes(ctx context.Context, in *WatchNodesRequest, opts ...grpc.CallOption) (EdgeNodeModelService_WatchNodesClient, error) {
	stream, err := c.cc.NewStream(ctx, &EdgeNodeModelService_ServiceDesc.Streams[0], EdgeNodeModelService_WatchNodes_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &edgeNodeModelServiceWatchNodesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EdgeNodeModelService_WatchNodesClient interface {
	Recv() (*WatchNodesResponse, error)
	grpc.ClientStream
}

type edgeNodeModelServiceWatchNodesClient struct {
	grpc.ClientStream
}

func (x *edgeNodeModelServiceWatchNodesClient) Recv() (*WatchNodesResponse, error) {
	m := new(WatchNodesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *edgeNodeModelServiceClient) ListNodes(ctx context.Context, in *ListNodesRequest, opts ...grpc.CallOption) (EdgeNodeModelService_ListNodesClient, error) {
	stream, err := c.cc.NewStream(ctx, &EdgeNodeModelService_ServiceDesc.Streams[1], EdgeNodeModelService_ListNodes_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &edgeNodeModelServiceListNodesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EdgeNodeModelService_ListNodesClient interface {
	Recv() (*ListNodesResponse, error)
	grpc.ClientStream
}

type edgeNodeModelServiceListNodesClient struct {
	grpc.ClientStream
}

func (x *edgeNodeModelServiceListNodesClient) Recv() (*ListNodesResponse, error) {
	m := new(ListNodesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *edgeNodeModelServiceClient) DeleteNodes(ctx context.Context, in *DeleteNodesRequest, opts ...grpc.CallOption) (*DeleteNodesResponse, error) {
	out := new(DeleteNodesResponse)
	err := c.cc.Invoke(ctx, EdgeNodeModelService_DeleteNodes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EdgeNodeModelServiceServer is the server API for EdgeNodeModelService service.
// All implementations should embed UnimplementedEdgeNodeModelServiceServer
// for forward compatibility
type EdgeNodeModelServiceServer interface {
	// CreateNodes creates a number of nodes
	CreateNodes(context.Context, *CreateNodesRequest) (*CreateNodesResponse, error)
	// CreateNode creates a single node
	CreateNode(context.Context, *CreateNodeRequest) (*CreateNodeResponse, error)
	// GetNode retrieves a node by UUID
	GetNode(context.Context, *GetNodeRequest) (*GetNodeResponse, error)
	// UpdateNode updates an existing node
	UpdateNode(context.Context, *UpdateNodeRequest) (*UpdateNodeResponse, error)
	// DeleteNode deletes a node by UUID
	DeleteNode(context.Context, *DeleteNodeRequest) (*DeleteNodeResponse, error)
	// WatchNodes streams node events
	WatchNodes(*WatchNodesRequest, EdgeNodeModelService_WatchNodesServer) error
	// ListNodes streams a list of nodes
	ListNodes(*ListNodesRequest, EdgeNodeModelService_ListNodesServer) error
	// DeleteNodes deletes multiple nodes
	DeleteNodes(context.Context, *DeleteNodesRequest) (*DeleteNodesResponse, error)
}

// UnimplementedEdgeNodeModelServiceServer should be embedded to have forward compatible implementations.
type UnimplementedEdgeNodeModelServiceServer struct {
}

func (UnimplementedEdgeNodeModelServiceServer) CreateNodes(context.Context, *CreateNodesRequest) (*CreateNodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNodes not implemented")
}
func (UnimplementedEdgeNodeModelServiceServer) CreateNode(context.Context, *CreateNodeRequest) (*CreateNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNode not implemented")
}
func (UnimplementedEdgeNodeModelServiceServer) GetNode(context.Context, *GetNodeRequest) (*GetNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNode not implemented")
}
func (UnimplementedEdgeNodeModelServiceServer) UpdateNode(context.Context, *UpdateNodeRequest) (*UpdateNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNode not implemented")
}
func (UnimplementedEdgeNodeModelServiceServer) DeleteNode(context.Context, *DeleteNodeRequest) (*DeleteNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNode not implemented")
}
func (UnimplementedEdgeNodeModelServiceServer) WatchNodes(*WatchNodesRequest, EdgeNodeModelService_WatchNodesServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchNodes not implemented")
}
func (UnimplementedEdgeNodeModelServiceServer) ListNodes(*ListNodesRequest, EdgeNodeModelService_ListNodesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListNodes not implemented")
}
func (UnimplementedEdgeNodeModelServiceServer) DeleteNodes(context.Context, *DeleteNodesRequest) (*DeleteNodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNodes not implemented")
}

// UnsafeEdgeNodeModelServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EdgeNodeModelServiceServer will
// result in compilation errors.
type UnsafeEdgeNodeModelServiceServer interface {
	mustEmbedUnimplementedEdgeNodeModelServiceServer()
}

func RegisterEdgeNodeModelServiceServer(s grpc.ServiceRegistrar, srv EdgeNodeModelServiceServer) {
	s.RegisterService(&EdgeNodeModelService_ServiceDesc, srv)
}

func _EdgeNodeModelService_CreateNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EdgeNodeModelServiceServer).CreateNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EdgeNodeModelService_CreateNodes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EdgeNodeModelServiceServer).CreateNodes(ctx, req.(*CreateNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EdgeNodeModelService_CreateNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EdgeNodeModelServiceServer).CreateNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EdgeNodeModelService_CreateNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EdgeNodeModelServiceServer).CreateNode(ctx, req.(*CreateNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EdgeNodeModelService_GetNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EdgeNodeModelServiceServer).GetNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EdgeNodeModelService_GetNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EdgeNodeModelServiceServer).GetNode(ctx, req.(*GetNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EdgeNodeModelService_UpdateNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EdgeNodeModelServiceServer).UpdateNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EdgeNodeModelService_UpdateNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EdgeNodeModelServiceServer).UpdateNode(ctx, req.(*UpdateNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EdgeNodeModelService_DeleteNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EdgeNodeModelServiceServer).DeleteNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EdgeNodeModelService_DeleteNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EdgeNodeModelServiceServer).DeleteNode(ctx, req.(*DeleteNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EdgeNodeModelService_WatchNodes_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchNodesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EdgeNodeModelServiceServer).WatchNodes(m, &edgeNodeModelServiceWatchNodesServer{stream})
}

type EdgeNodeModelService_WatchNodesServer interface {
	Send(*WatchNodesResponse) error
	grpc.ServerStream
}

type edgeNodeModelServiceWatchNodesServer struct {
	grpc.ServerStream
}

func (x *edgeNodeModelServiceWatchNodesServer) Send(m *WatchNodesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _EdgeNodeModelService_ListNodes_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListNodesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EdgeNodeModelServiceServer).ListNodes(m, &edgeNodeModelServiceListNodesServer{stream})
}

type EdgeNodeModelService_ListNodesServer interface {
	Send(*ListNodesResponse) error
	grpc.ServerStream
}

type edgeNodeModelServiceListNodesServer struct {
	grpc.ServerStream
}

func (x *edgeNodeModelServiceListNodesServer) Send(m *ListNodesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _EdgeNodeModelService_DeleteNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EdgeNodeModelServiceServer).DeleteNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EdgeNodeModelService_DeleteNodes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EdgeNodeModelServiceServer).DeleteNodes(ctx, req.(*DeleteNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EdgeNodeModelService_ServiceDesc is the grpc.ServiceDesc for EdgeNodeModelService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EdgeNodeModelService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ensim.v1.EdgeNodeModelService",
	HandlerType: (*EdgeNodeModelServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNodes",
			Handler:    _EdgeNodeModelService_CreateNodes_Handler,
		},
		{
			MethodName: "CreateNode",
			Handler:    _EdgeNodeModelService_CreateNode_Handler,
		},
		{
			MethodName: "GetNode",
			Handler:    _EdgeNodeModelService_GetNode_Handler,
		},
		{
			MethodName: "UpdateNode",
			Handler:    _EdgeNodeModelService_UpdateNode_Handler,
		},
		{
			MethodName: "DeleteNode",
			Handler:    _EdgeNodeModelService_DeleteNode_Handler,
		},
		{
			MethodName: "DeleteNodes",
			Handler:    _EdgeNodeModelService_DeleteNodes_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchNodes",
			Handler:       _EdgeNodeModelService_WatchNodes_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListNodes",
			Handler:       _EdgeNodeModelService_ListNodes_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "ensim/v1/ensim.proto",
}
