# SPDX-FileCopyrightText: (C) 2025 Intel Corporation
# SPDX-License-Identifier: Apache-2.0

---
- name: Rsync
  hosts: localhost
  become: yes
  vars_files:
    - "{{ ansible_secret_file_path }}"
  tasks:
    - name: Remove directory on remote hosts
      ansible.builtin.file:
        path: "{{ hostvars[item].copy_path }}"
        state: absent
      loop: "{{ groups['all'] }}"
      when:
        - hostvars[item].ansible_host is defined
        - hostvars[item].ansible_user is defined
        - hostvars[item].copy_path is defined
        - item != 'localhost'
      delegate_to: "{{ item }}"

    - name: Synchronize directory from source to target machine using rsync
      shell: rsync -avzP -e ssh {{ ansible_vm_deploy_scripts }} "{{ hostvars[item].ansible_user }}@{{ hostvars[item].ansible_host }}:{{ hostvars[item].copy_path }}"
      loop: "{{ groups['all'] }}"
      when:
        - hostvars[item].ansible_host is defined
        - hostvars[item].ansible_user is defined
        - hostvars[item].copy_path is defined
        - item != 'localhost'
      delegate_to: localhost

- name: Install specific packages, update apt cache, and verify applications
  hosts: all
  become: no
  vars_files:
    - "{{ ansible_secret_file_path }}"
  tasks:

    - name: Check if install_packages is set to zero for each host
      debug:
        msg: "install_packages is set to zero on {{ inventory_hostname }}. VM dependencies will not be installed on this host."
      when: install_packages == 0

    - name: Register hosts where install_packages is not zero
      set_fact:
        install_packages_valid: true
      when: install_packages != 0

    - name: Fail if install_packages is zero for all hosts
      meta: end_play
      when: groups['all'] | map('extract', hostvars, 'install_packages_valid') | select('defined') | length == 0
      ignore_errors: false

    - name: Execute the installation script on the remote host and save the log
      become: no
      expect:
        command: "sh -c 'cd {{ copy_path }} && ./install_packages.sh | tee {{ copy_path }}/installation_log.txt'"
        responses:
          '\[sudo\] password for .*:': "{{ ansible_become_pass }}"
        timeout: "{{ ansible_timeout_for_install_vm_dependencies }}"
      register: create_vms_output
      when: install_packages > 0

    - name: Display the installation log directly from the remote host
      command: cat "{{ copy_path }}/installation_log.txt"
      register: installation_log
      changed_when: false
      when: install_packages > 0

    - name: Show the installation log
      debug:
        var: installation_log.stdout_lines
      when: install_packages > 0

    - name: Verify installations and display versions
      shell: dpkg -l | grep -E 'qemu|libvirt-daemon-system|ebtables|libguestfs-tools|libxslt-dev|libxml2-dev'
      register: installed_apps
      ignore_errors: yes
      when: install_packages > 0

    - name: Display the list of installed applications and their versions
      debug:
        msg: "{{ installed_apps.stdout_lines }}"
      when: install_packages > 0
